# First  Negative number in every subarray of size K

def fisrtNegative(nums,k):
    i = 0
    j = 0
    r=[]
    result = []
    while j < len(nums):
        if nums[j] <0:
            r.append(nums[j])
        else:
            r.append(0)
        if j-i+1 <k:
            j+=1
        elif j-i+1 == k:
            for m in range(i,j+1):
                if r[m] <0:
                    result.append(r[m])
                    break
            if m == j and (r[j] == 0 or r[j] >0):
                result.append(0)
            i+=1
            j+=1
    return result


l = [-8, 2, 3, -6, 10]
k = 1
print(fisrtNegative(l,k))



# More efficient approach.
O(N) complexity.
# First  Negative number in every subarray of size K

def fisrtNegative(nums,k):
    i = 0
    j = 0
    result = []
    current_ne = -1
    while j < len(nums):
        if nums[j] <0:
            if current_ne == -1:
                current_ne = j
                
        if j-i+1 <k:
            j+=1
        elif j-i+1 == k:
            if current_ne < i:
                for m in range(i,j+1):
                    if nums[m] <0:
                        current_ne = j
                        break
            result.append(nums[current_ne])
            i+=1
            j+=1
    return result


l = [-8, 2, 3, -6, 10,-7]
k = 3
print(fisrtNegative(l,k))



# First  Negative number in every subarray of size K

def fisrtNegative(nums,k):
    i = 0
    j = 0
    result = []
    current_ne = []
    while j < len(nums):
        if nums[j] <0:
            current_ne.append(nums[j])
            
        if j-i+1 <k:
            j+=1
        elif j-i+1 == k:
            if len(current_ne) == 0:
                result.append(0)
            else:
                result.append(current_ne[0])
            if nums[i] <0:
                del current_ne[0]
            
            i+=1
            j+=1
            
    return result


l = [-8, 2, 3, -6, 10,-7]
k = 2
print(fisrtNegative(l,k))
