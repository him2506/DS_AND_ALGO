# find the count of subsets.
# ex :- arr = [1,1,2,3] , diff = 1
# Ans = 3
# explanation:- 1.-[1,1,2] and [3] 2.- [1,2] and [1,3] 3.-[1,2] and [1,3] yhan 1's - 2 times h. 

def count_subset_diff(wt,c):
    n = len(wt)
    dp = []
    for i in range(n+1):
        h = []
        for j in range(c+1):
            h.append(-1)
        dp.append(h)

    for y in range(c+1):
        dp[0][y] = 0
    for x in range(n+1):
        dp[x][0] = 1

    for i in range(1,n+1):
        for j in range(1,c+1):
            if wt[i-1] <= j:
                dp[i][j] = dp[i-1][j-wt[i-1]] + dp[i-1][j]
                    
            else:
                dp[i][j] = dp[i-1][j]     
    print(dp)
    return dp
    
    
wt = [1,1,2,3]
n = len(wt)
diff = 3
c = 0
for j in wt:
    c+=j
    
# Since we assume that all numbers in array are integer numbers.
# Hence if (c+diff) is not even then diff will not exist.  
if (c+diff)%2 != 0 :
    print(False)
else:
    # here we assume s1 will be greater then s2.
    # hence s1 - s2 = diff and s1+s2= c, add both eqation. s1 is (diff+c)/2.
    #################### so we finally find the count of the subsets whoose sum will be s1. 
    s1 = int((c+diff)/2)
    x = count_subset_diff(wt,s1)
    print(x[-1][s1])
